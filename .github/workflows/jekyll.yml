# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# Sample workflow for building and deploying a Jekyll site to GitHub Pages
name: Deploy Jekyll site to Pages

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["master"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment
concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '2.7'
          bundler-cache: true # runs 'bundle install' and caches installed gems automatically
      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v3
      - name: Build with Jekyll
        run: bundle exec jekyll build --baseurl "${{ steps.pages.outputs.base_path }}"
        env:
          JEKYLL_ENV: production
      - name: List Jekyll build output
        run: ls -la _site
      - name: Upload Pages artifact
        id: upload
        shell: bash
        run: |
          echo "Uploading artifact..."
          ARTIFACT_PATH=$(cd _site && pwd)
          echo "Artifact path: $ARTIFACT_PATH"
          
          if [ ! -d "_site" ]; then
            echo "ERROR: _site directory not found!"
            ls -la
            exit 1
          fi
          
          # Create artifact.tar
          echo "::group::Creating artifact.tar"
          tar --dereference --hard-dereference -cvf artifact.tar -C _site .
          echo "::endgroup::"
          
          # List files in the artifact
          echo "::group::Files in artifact"
          tar -tf artifact.tar | head -20
          echo "::endgroup::"
          
          # Set environment variable for deploy job
          echo "ARTIFACT_PATH=$PWD/artifact.tar" >> $GITHUB_ENV
          echo "PAGES_ARTIFACT_NAME=github-pages" >> $GITHUB_ENV
          
          # This is similar to what actions/upload-pages-artifact does internally
          echo "GITHUB_PAGES=true" >> $GITHUB_ENV
          echo "GITHUB_PAGES_ARTIFACT=artifact.tar" >> $GITHUB_ENV
      
      # Upload artifact as a separate step
      - name: Archive artifact
        uses: actions/upload-artifact@v2  # Using v2 which has fewer issues
        with:
          name: github-pages
          path: artifact.tar
          if-no-files-found: error
          retention-days: 1

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v2  # Using v2 which has fewer issues
        with:
          name: github-pages
          path: ./

      - name: Display downloaded artifact info
        run: |
          echo "Displaying downloaded artifact info:"
          ls -la
          if [ ! -f "artifact.tar" ]; then
            echo "ERROR: artifact.tar not found!"
            exit 1
          fi
          echo "GITHUB_PAGES=true" >> $GITHUB_ENV
          echo "GITHUB_PAGES_ARTIFACT=artifact.tar" >> $GITHUB_ENV
      
      - name: Setup Pages
        uses: actions/configure-pages@v3
        
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v2
