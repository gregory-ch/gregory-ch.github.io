# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# Sample workflow for building and deploying a Jekyll site to GitHub Pages
name: Deploy Jekyll site to Pages

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["master"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow one concurrent deployment
concurrency:
  group: "pages"
  cancel-in-progress: true

env:
  JEKYLL_ENV: production
  BUNDLE_GEMFILE: ${{ github.workspace }}/Gemfile

jobs:
  # Build job
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      # Use the standard GitHub Pages action recommended approach
      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v4
        
      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.1' # Try a different Ruby version
          bundler-cache: false # Disable for now, we'll handle manually
      
      # Diagnostic step - show environment
      - name: Environment Information
        run: |
          echo "Ruby version: $(ruby -v)"
          echo "Gem version: $(gem -v)"
          echo "Bundler version: $(bundle -v || echo 'Bundler not found')"
          echo "Jekyll env: $JEKYLL_ENV"
          echo "Working directory: $(pwd)"
          echo "Gemfile location: $BUNDLE_GEMFILE"
          ls -la
          
      # Update RubyGems and Bundler
      - name: Update RubyGems and Bundler
        run: |
          gem update --system
          gem install bundler -v "~> 2.4.0"
          echo "Updated RubyGems to: $(gem -v)"
          echo "Updated Bundler to: $(bundle -v)"

      # Install dependencies with verbose output
      - name: Install dependencies
        run: |
          echo "Installing dependencies..."
          bundle config path vendor/bundle
          bundle config set --local without 'development test'
          bundle install --jobs 4 --retry 3 --verbose
          echo "Bundle installed successfully"
          
      # Build the site
      - name: Build with Jekyll
        run: |
          echo "Building site..."
          bundle exec jekyll build --baseurl "${{ steps.pages.outputs.base_path }}" --verbose
          echo "Site built successfully"
          ls -la _site
          
      # Diagnose if website generation failed
      - name: Check build output
        run: |
          if [ ! -d "_site" ]; then
            echo "ERROR: _site directory not created!"
            exit 1
          fi
          echo "Site files count: $(find _site -type f | wc -l)"
      
      # Create artifact
      - name: Create Pages Artifact
        run: |
          echo "Creating artifact from _site directory..."
          tar --dereference --hard-dereference --directory _site/ -cf artifact.tar .
          echo "Artifact created successfully"
      
      # Optional: List contents of artifact to verify
      - name: Verify artifact contents
        run: |
          echo "Listing artifact contents..."
          tar -tf artifact.tar | head -n 20
          echo "Total files in artifact: $(tar -tf artifact.tar | wc -l)"
      
      # Deploy to GitHub Pages
      - name: Upload artifact for deployment
        uses: actions/deploy-pages@v2
        with:
          artifact_name: github-pages
          timeout: 600000 # 10 minutes
